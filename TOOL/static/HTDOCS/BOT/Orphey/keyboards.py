#–ò–º–ø–æ—Ä—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∫–Ω–æ–ø–æ–∫
#from telegram import ReplyKeyboardMarkup
#from telegram import KeyboardButton

#from aiogram import types
import json
import os

from DATABASE import sqlighter

#–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü

'''
#---–ì–ª–∞–≤–Ω–∞—è---
from Pages import main
#from Pages.main import Page_main, Page_find, Page_listen, Page_ansvers
from Pages.main import Page_main
#from Pages.main import Page_find
from Pages.main import Page_listen
from Pages.main import Page_ansvers
#-------------
'''

pages= []

def Pages_Connect(path):
	for file_name in os.listdir(path):

		str_import_from = path.replace('\\', '.').replace('..', '.')
		if(str_import_from[-1] == '.'):
			str_import_from = str_import_from[0: -1]

		if(file_name != '__pycache__') and (file_name != 'STANDART.py'):

			file=os.path.join(path,file_name)


			# –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞
			if os.path.isdir(file):
				com = 'from {} import {}'.format(str_import_from, file_name)
				exec(com)

				Pages_Connect('{}\\{}'.format(path, file_name))

			# –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª
			else:
				if(file_name[-3:] == '.py'):
					file_name = file_name[:-3]
					com = 'from {} import {}'.format(str_import_from, file_name)
					exec(com)

					com = 'pages.append({}.{}())'.format(file_name, file_name)
					exec(com)
					



# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
path = 'Pages\\'
print('Start loading pages...')
Pages_Connect(path)
print('Pages loaded.')


'''
pages = [
		#–ì–ª–∞–≤–Ω–∞—è
		Page_main.Page_main(), Page_find.Page_find(), Page_listen.Page_listen(), Page_ansvers.Page_ansvers()
		]
'''



#------------------------------------- –í—ã–±–æ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã -------------------------------------
def Keyboard_keyboards(app_from, page, user_id):
	# app_from - –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å (—Ç–µ–ª–µ–≥—Ä–∞–º, –≤–∫)
	for p in pages:
		if(page == p.pageName):
			keyboard_request = p.Keyboard(app_from, user_id)
			return keyboard_request
#--------------------------------------------------------------------------------------------

#------------------------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π -------------------------------------
def Keyboard_Events(app_from, page, user_id, data):
	p_ = [page]

	if(data == '–ü–û–ú–û–ì–ò') or (data == 'üÜò'):
		sqlighter.set_user_data(app_from = app_from, user_id = user_id, line = 'data', data = '')
		return {'users': [{'user_token': '-', 'page': 'main', 'page_data': '-', 'answers': []}]}

	for p in pages:
		if(page == p.pageName):
			p_ = p.Keyboard_Events(app_from, user_id, data)
			if(p_ == '-'):
				p_ = p.Ansver(app_from, user_id)
			return p_
#----------------------------------------------------------------------------------------------

#------------------------------------- –û—Ç–≤–µ—Ç -------------------------------------
def Keyboard_Ansver(page, app_from, user_id):
	for p in pages:
		if(page == p.pageName):
			return p.Ansver(app_from, user_id)
	#–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
	return '–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç:'
#---------------------------------------------------------------------------------

#------------------------------------ –ú–µ–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ ------------------------------------
def Media_Message(app_from, user_id, page, media_data):
	p_ = [page]
	for p in pages:
		if(page == p.pageName):
			try:
				p_ = p.Media_Message(app_from, user_id, media_data)
				if(p_ != '-'):
					return p_
			except Exception as e:
				print(e)
	
			return p.Ansver(app_from, user_id)
#----------------------------------------------------------------------------------------


#------------------------------------ –ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ ------------------------------------
def Audio_Message(app_from, user_id, page, audio_data):
	p_ = [page]
	for p in pages:
		if(page == p.pageName):
			try:
				p_ = p.Audio_Message(app_from, user_id, audio_data)
				if(p_ != '-'):
					return p_
			except Exception as e:
				pass
	
			return p.Ansver(app_from, user_id)
#----------------------------------------------------------------------------------------