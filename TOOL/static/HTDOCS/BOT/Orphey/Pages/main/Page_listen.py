'''
-------------- –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –∫–Ω–æ–ø–æ–∫ –í–ö --------------
negative	-	–ö—Ä–∞—Å–Ω—ã–π
positive	-	–ó–µ–ª—ë–Ω—ã–π
primary		-	–°–∏–Ω–∏–π
secondary	-	–ë–µ–ª—ã–π
--------------------------------------------------------
'''



from DATABASE import sqlighter
import json



def get_item(item_id):
	#answers = [{'text': '–ï—Å–ª–∏ —É–∑–Ω–∞–ª —á—Ç–æ —ç—Ç–æ, –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:', 'media': [], 'type': 'text'}]
	answers = []

	# –û–ø–∏—Å–∞–Ω–∏–µ
	#descript = sqlighter.get_item_data(app_from = app_from, user_id = user_id, line = 'descript', line_selector = 'id', line_selector_value = data_page['id_item'])
	descript = sqlighter.get_data(table_name = 'items', line = 'descript', line_selector = 'id', line_selector_value = item_id)
	#print(descript)
	if (descript != None) and (descript != ''):
		answers.append(json.loads(descript))

	
	# –ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
	links = sqlighter.get_data(table_name = 'items', line = 'link', line_selector = 'id', line_selector_value = item_id)
	if (links != None) and (links != ''):
		answers.append(json.loads(links))


	return answers


def change_item(app_from, user_id, data_page):
	id_new = int(data_page['id_item'])
	token_user = sqlighter.get_data(table_name = 'users', line = 'user_token', line_selector = 'user_id_{}'.format(app_from), line_selector_value = user_id)
	count = int(sqlighter.get_count_items(token = token_user))

	if (count >= 2):
		while (data_page['id_item'] == id_new):
			id_new = int(sqlighter.get_random_item(token = token_user))
	elif (count == 1):
		id_new = int(sqlighter.get_random_item(token = token_user))
	else:
		return -1;

	return id_new



# –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –ë–î
def add_answer(app_from, user_id, data, id_query):
	data_page = json.loads(sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data'))

	token_user_query = sqlighter.get_data(table_name = 'items', line = 'user_token', line_selector = 'id', line_selector_value = id_query)
	token_user_answer = sqlighter.get_data(table_name = 'users', line = 'user_token', line_selector = 'user_id_{}'.format(app_from), line_selector_value = user_id)

	#print('{}\n{}\n{}\n{}'.format(id_query, token_user_query, token_user_answer, data)) # id –∑–∞–ø—Ä–æ—Å–∞

	# –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	data.update({'type': 'text'})
	sqlighter.create_answer(token_user_query = token_user_query, id_query = id_query, token_user_answer = token_user_answer, answer = json.dumps(data))

	#------------------
	# –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏–≤—à–µ–º—É –∑–∞–ø—Ä–æ—Å
	user_query_answers = {'user_token': token_user_query, 'page': '-', 'page_data': '-', 'answers': [
		{'type': '-', 'text': '–ù–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n\n', 'media': []},
	] + get_item(id_query) + [
		{'type': '-', 'text': '–¥–∞–ª–∏ –æ—Ç–≤–µ—Ç:\n\n{}'.format(data['text']), 'media': data['media']},
	]}



	# –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ –¥–∞–ª –æ—Ç–≤–µ—Ç
	data_page['id_item'] = int(change_item(app_from, user_id, json.loads(sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')))) # –ü–µ—Ä–µ–ª–∏—Å—Ç–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	user_answer_answers = {'user_token': '-', 'page': '-', 'page_data': '-', 'answers': [
		{'type': '-', 'text': '–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n–ï—Å–ª–∏ —É–∑–Ω–∞–ª —á—Ç–æ —ç—Ç–æ, –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:', 'media': []},
	] + get_item(data_page['id_item'])}

	sqlighter.set_user_data(app_from = app_from, user_id = user_id, line = 'data', data = json.dumps(data_page))

	return {'users': [user_query_answers, user_answer_answers]}
	

def data_clear(app_from, user_id):
	sqlighter.set_user_data(app_from = app_from, user_id = user_id, line = 'data', data = '')

#------------------------------------- –°–ª—É—à–∞—Ç—å –∑–∞–ø–∏—Å–∏ -------------------------------------

# –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
def ImportFromStandart(answers = [], page = '-'):
	answers_ = {'users': [{'user_token': '-', 'page': page, 'page_data': '-', 'answers': []}]}
	for i in answers:
		answers_['users'][0]['answers'].append({'type': '-', 'text': i, 'media': []})

	return answers_


class Page_listen():
	def __init__(self):
		self.pageName = 'listen'

		'''
		üö´ - –ñ–∞–ª–æ–±–∞
		üîî - –°–æ–æ–±—â–∏—Ç—å –æ –≤—ã—Ö–æ–¥–µ
		‚è≥ - –û—Ç–ª–æ–∂–∏—Ç—å –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ—Ç–æ–º
		‚û° - –°–ª–µ–¥—É—é—â–∞—è –∞–ø–∏—Å—å
		'''
		self.buttons = ['–ù–∞–∑–∞–¥', '‚è≥', 'üö´', 'üîî']

		self.BUTTON_NEXT = '‚û°'
		#self.BUTTON_PREV = '‚¨Ö'
	def Keyboard(self, app_from, user_id):
		#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		keyboard = []

		'''
		keyboard.append([
			{'text': self.BUTTON_PREV, 'color': 'secondary'},
			{'text': self.BUTTON_NEXT, 'color': 'secondary'},
		])
		'''

		data_page_str = sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')
		if(data_page_str != None) and (data_page_str != ''):
			data_page = json.loads(data_page_str)
		else:
			data_page = {'id_item': -1}
		item_id = change_item(app_from, user_id, data_page)

		if(item_id != -1):
			keyboard.append([
				# –ñ–∞–ª–æ–±–∞
				#{'text': self.buttons[2], 'color': 'negative'},
				# –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ
				{'text': self.buttons[1], 'color': 'positive'},
				# –£–≤–µ–¥–æ–º–∏—Ç—å
				#{'text': self.buttons[3], 'color': 'positive'},
				# –°–º–µ–Ω–∏—Ç—å
				{'text': self.BUTTON_NEXT, 'color': 'secondary'},
			])


		keyboard.append(
			[
				{'text': self.buttons[0], 'color': 'secondary'},
			],
		)



		return {'type': 'message', 'keyboard': keyboard}


	#–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
	def Ansver(self, app_from, user_id):
		answers = [{'text': '–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.', 'media': [], 'type': 'text'}]

		data_page_str = sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')
		if(data_page_str != None) and (data_page_str != ''):
			data_page = json.loads(data_page_str)
		else:
			data_page = {}

		if not('id_item' in data_page):
			data_page.update({'id_item': -1})
			item_id = change_item(app_from, user_id, data_page)
			
			if (item_id != -1):
				data_page['id_item'] = item_id
				sqlighter.set_user_data(app_from = app_from, user_id = user_id, line = 'data', data = json.dumps(data_page))

		#print('\n{}\n'.format(data_page['id_item']))

		if (data_page['id_item'] != -1):
			answers = [{'text': '–ï—Å–ª–∏ —É–∑–Ω–∞–ª —á—Ç–æ —ç—Ç–æ, –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:', 'media': [], 'type': 'text'}]
			answers += get_item(data_page['id_item'])

		return {'users': [{'user_token': '-', 'page': '-', 'page_data': '-', 'answers': answers}]}



	#–û–±—Ä–∞–±–æ—á–∏–∫ –∫–Ω–æ–ø–æ–∫
	def Keyboard_Events(self, app_from, user_id, data):

		data_page_str = sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')
		if(data_page_str != None) and (data_page_str != ''):
			data_page = json.loads(data_page_str)
		else:
			data_page = {}


		
		# –ú–µ–Ω—é
		if (data == self.buttons[0]):
			data_clear(app_from, user_id)
			return ImportFromStandart(page = 'main')



		# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ
		if (data == self.buttons[1]):
			# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å
			
			count_item = sqlighter.get_count_look_leter_by_item(id_item = data_page['id_item']) 
			
			if (count_item <= 0):
				token_user = sqlighter.get_data(table_name = 'users', line = 'user_token', line_selector = 'user_id_{}'.format(app_from), line_selector_value = user_id)
				sqlighter.save_item(id_query = data_page['id_item'], token_user_save = token_user)

				ansvers = ImportFromStandart(answers = ['–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ". –í —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π, –∫–æ–≥–¥–∞ –≤–∞–º —Å—Ç–∞–Ω–µ—Ç —É–¥–æ–±–Ω–æ.'])
			else:
				ansvers = ImportFromStandart(answers = ['–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ —É –≤–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.'])

			id_new = change_item(app_from, user_id, json.loads(sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')))
			data_page['id_item'] = id_new
			sqlighter.set_user_data(app_from = app_from, user_id = user_id, line = 'data', data = json.dumps(data_page))


			ansvers['users'][0]['answers'] += self.Ansver(app_from, user_id)['users'][0]['answers']

			return ansvers




		# –°–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å
		if(data == self.BUTTON_NEXT):
			id_new = change_item(app_from, user_id, json.loads(sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')))
			data_page['id_item'] = id_new
			sqlighter.set_user_data(app_from = app_from, user_id = user_id, line = 'data', data = json.dumps(data_page))
			return ImportFromStandart(page = '-')


		# –°–æ–æ–±—â–∏—Ç—å –æ –≤—ã—Ö–æ–¥–µ
		if (data == self.buttons[3]):
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
			id_query = data_page['id_item']
			token_user_save = sqlighter.get_data(table_name = 'users', line = 'user_token', line_selector = 'user_id_{}'.format(app_from), line_selector_value = user_id)

			if (sqlighter.test_alarm_item_saved(id_query = id_query, token_user_save = token_user_save) == 0):
				id_user_save = sqlighter.get_data(table_name = 'users', line = 'id', line_selector = 'user_id_{}'.format(app_from), line_selector_value = user_id)
				sqlighter.save_item_alarm(id_query = id_query, token_user_save = token_user_save, id_user_save = id_user_save)

				ansvers = ImportFromStandart(answers = ['–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–µ–Ω–∏–π. –ö–æ–≥–¥–∞ –µ—ë –Ω–∞–π–¥—É—Ç, –≤–∞–º —Å–æ–æ–±—â–∞—Ç.'])

			else:
				ansvers = ImportFromStandart(answers = ['–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç—É –∑–∞–ø–∏—Å—å.'])

			# –°–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
			id_new = change_item(app_from, user_id, json.loads(sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')))
			data_page['id_item'] = id_new
			sqlighter.set_user_data(app_from = app_from, user_id = user_id, line = 'data', data = json.dumps(data_page))


			ansvers['users'][0]['answers'] += self.Ansver(app_from, user_id)['users'][0]['answers']

			return ansvers



		# –û—Ç–≤–µ—Ç
		data = {'text': data, 'media': [], 'type': 'text'}
		return add_answer(app_from, user_id, data, data_page['id_item'])
		
		
		return '-'
	


	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –∞ —ç—Ç–∞ —á–∞—Å—Ç—å –¥–µ–ª–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î)
	def Media_Message(self, app_from, user_id, data):
		data_page_str = sqlighter.get_user_data(app_from = app_from, user_id = user_id, line = 'data')
		if(data_page_str != None) and (data_page_str != ''):
			data_page = json.loads(data_page_str)
		return add_answer(app_from, user_id, data, data_page['id_item'])
#-----------------------------------------------------------------------------------